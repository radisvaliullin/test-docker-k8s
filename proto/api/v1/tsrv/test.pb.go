// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/v1/tsrv/test.proto

package tsrv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_95a0419751309b28, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type Response struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_95a0419751309b28, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "testsrv.v1.Request")
	proto.RegisterType((*Response)(nil), "testsrv.v1.Response")
}

func init() { proto.RegisterFile("pb/v1/tsrv/test.proto", fileDescriptor_95a0419751309b28) }

var fileDescriptor_95a0419751309b28 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xf3, 0x30,
	0x18, 0xc7, 0xdf, 0x74, 0x2f, 0x3a, 0x33, 0x90, 0x11, 0x9d, 0x8c, 0xe9, 0x61, 0xf4, 0x54, 0xd4,
	0x35, 0xeb, 0xa6, 0x28, 0x7a, 0x91, 0xe1, 0xc1, 0x73, 0xf5, 0xe4, 0x2d, 0x6d, 0x1f, 0x6a, 0x58,
	0xd7, 0xb4, 0x49, 0x1a, 0xf0, 0xea, 0x57, 0xf0, 0x9b, 0xe9, 0x57, 0xf0, 0x83, 0x48, 0xb2, 0x89,
	0x7a, 0x92, 0x5e, 0xc2, 0xc3, 0xc3, 0xf3, 0xfb, 0x3d, 0xff, 0x90, 0xe0, 0x41, 0x95, 0x50, 0x13,
	0x51, 0xad, 0xa4, 0xa1, 0x1a, 0x94, 0x0e, 0x2b, 0x29, 0xb4, 0x20, 0xd8, 0xd6, 0x4a, 0x9a, 0xd0,
	0x44, 0xa3, 0xa3, 0x5c, 0x88, 0xbc, 0x00, 0xca, 0x2a, 0x4e, 0x59, 0x59, 0x0a, 0xcd, 0x34, 0x17,
	0xa5, 0x5a, 0x4f, 0xfa, 0x27, 0x78, 0x3b, 0x86, 0xba, 0x01, 0xa5, 0xc9, 0x2e, 0xf6, 0x78, 0x36,
	0x44, 0x63, 0x14, 0x74, 0x62, 0x8f, 0x67, 0xa4, 0x8f, 0x3b, 0x2b, 0x95, 0x0f, 0xbd, 0x31, 0x0a,
	0x76, 0x62, 0x5b, 0xfa, 0xa7, 0xb8, 0x1b, 0x83, 0xaa, 0x44, 0xa9, 0xe0, 0xef, 0xe9, 0xd9, 0x9b,
	0x87, 0x7b, 0x0f, 0xa0, 0xf4, 0x3d, 0x48, 0xc3, 0x53, 0x20, 0x77, 0xb8, 0x23, 0xa1, 0x26, 0x7b,
	0xe1, 0x77, 0xb8, 0x70, 0xb3, 0x7b, 0xb4, 0xff, 0xbb, 0xb9, 0xde, 0xe1, 0x1f, 0xbc, 0xbc, 0x7f,
	0xbc, 0x7a, 0x7d, 0xbf, 0xe7, 0xc2, 0x9b, 0x88, 0x4a, 0xa8, 0xaf, 0xd0, 0x31, 0x89, 0x71, 0x57,
	0x42, 0x7d, 0x0b, 0x05, 0x7b, 0x6e, 0xa3, 0x3b, 0x74, 0xba, 0x81, 0xdf, 0xff, 0xa1, 0xcb, 0xac,
	0xc4, 0x3a, 0xcf, 0xf1, 0x7f, 0x09, 0xf5, 0xac, 0x8d, 0xef, 0xdf, 0x14, 0x6d, 0xb0, 0x79, 0x2b,
	0x2c, 0x40, 0xe4, 0xc2, 0x61, 0x67, 0x2d, 0xb1, 0x29, 0x5a, 0x2c, 0x1e, 0x6f, 0x72, 0xae, 0x9f,
	0x9a, 0x24, 0x4c, 0xc5, 0x8a, 0x4a, 0x96, 0x71, 0x65, 0x58, 0xc1, 0x9b, 0xa2, 0xe0, 0xa5, 0xfb,
	0x01, 0x93, 0x4c, 0xa4, 0x4b, 0x90, 0x93, 0xe5, 0xa5, 0xa2, 0xee, 0x89, 0xbf, 0x2e, 0x6b, 0x85,
	0xd7, 0xf6, 0x48, 0xb6, 0x5c, 0x7f, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x2e, 0x07, 0xc8,
	0x3d, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	Req(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ReqDelay(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Req2(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_Req2Client, error)
	Req3(ctx context.Context, opts ...grpc.CallOption) (TestService_Req3Client, error)
	Req4(ctx context.Context, opts ...grpc.CallOption) (TestService_Req4Client, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Req(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/testsrv.v1.TestService/req", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ReqDelay(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/testsrv.v1.TestService/reqDelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Req2(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_Req2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[0], "/testsrv.v1.TestService/req2", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceReq2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_Req2Client interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type testServiceReq2Client struct {
	grpc.ClientStream
}

func (x *testServiceReq2Client) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) Req3(ctx context.Context, opts ...grpc.CallOption) (TestService_Req3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[1], "/testsrv.v1.TestService/req3", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceReq3Client{stream}
	return x, nil
}

type TestService_Req3Client interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type testServiceReq3Client struct {
	grpc.ClientStream
}

func (x *testServiceReq3Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceReq3Client) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) Req4(ctx context.Context, opts ...grpc.CallOption) (TestService_Req4Client, error) {
	stream, err := c.cc.NewStream(ctx, &_TestService_serviceDesc.Streams[2], "/testsrv.v1.TestService/req4", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceReq4Client{stream}
	return x, nil
}

type TestService_Req4Client interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type testServiceReq4Client struct {
	grpc.ClientStream
}

func (x *testServiceReq4Client) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceReq4Client) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	Req(context.Context, *Request) (*Response, error)
	ReqDelay(context.Context, *Request) (*Response, error)
	Req2(*Request, TestService_Req2Server) error
	Req3(TestService_Req3Server) error
	Req4(TestService_Req4Server) error
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Req_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Req(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testsrv.v1.TestService/Req",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Req(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ReqDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).ReqDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testsrv.v1.TestService/ReqDelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).ReqDelay(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Req2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).Req2(m, &testServiceReq2Server{stream})
}

type TestService_Req2Server interface {
	Send(*Response) error
	grpc.ServerStream
}

type testServiceReq2Server struct {
	grpc.ServerStream
}

func (x *testServiceReq2Server) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_Req3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).Req3(&testServiceReq3Server{stream})
}

type TestService_Req3Server interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type testServiceReq3Server struct {
	grpc.ServerStream
}

func (x *testServiceReq3Server) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceReq3Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_Req4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).Req4(&testServiceReq4Server{stream})
}

type TestService_Req4Server interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type testServiceReq4Server struct {
	grpc.ServerStream
}

func (x *testServiceReq4Server) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceReq4Server) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testsrv.v1.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "req",
			Handler:    _TestService_Req_Handler,
		},
		{
			MethodName: "reqDelay",
			Handler:    _TestService_ReqDelay_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "req2",
			Handler:       _TestService_Req2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "req3",
			Handler:       _TestService_Req3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "req4",
			Handler:       _TestService_Req4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/v1/tsrv/test.proto",
}
